It's my less stupid implementation of dynamic programming algorith for knapsack 0-1 problem. Using 2d working matrix to store optimal weight-values for the previous only step (1 * capacity). Calculates  matrix value, then search the optimal set from matrix of bitsets.
Algorithm requires lesser huge amount of memory than previous (approximately (2 * (knap_capacity+1) + num_items) * sizeof(int) + ((items_num+1)*(knap_capacity+1) * sizeof(bit) )).
///////////////////////////////////////////////////////////////////////////////
INPUT FORMAT: 
elements_num knap_capacity
elem_1_value elem_1_weight
elem_2_value elem_2_weight
....
elem_n_value elem_n_weight
///////////////////////////////////////////////////////////////////////////////
OUTPUT FORMAT:
optimal_elem_num is_optimal
is_elem_1 is_elem_2 ... is_elem_n 
//comment:// ^ 1 - if element in the knap, else 0
/////////////////////////////////////////////////////////////////////////////// 
By default it reads from stdinput and print to stdout. You could define input and output files by (-i inputfile) and (-o outputfile) args. 
